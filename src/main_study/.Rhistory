left_join(df_summ)
## Modeling: note that more complex models resulted in singular fit or lack of convergence
mod_freq = lmer(data = df_all,
surprisal ~ word_number * article_number + affix + log_freq_article +
(1 | lemma) + (1 | sentence),
REML = FALSE)
mod_reduced = lmer(data = df_all,
surprisal ~ word_number * article_number + affix + # log_freq_article +
(1 | lemma) + (1 | sentence),
REML = FALSE)
summary(mod_freq)
anova(mod_freq, mod_reduced)
cite
cite(lme4)
cite(lmer)
cite("lmer")
?lmer
library(tidyverse)
library(lmtest)
library(forcats)
library(broom)
library(lme4)
library(ggridges)
library(lmerTest)
library(broom.mixed)
library(ggrepel)
library(tools)
library(viridis)
all_colors <- viridis::viridis(10, option = "mako")
my_colors <- all_colors[c(3, 5, 7)]  # Selecting specific colors from the palette
setwd("/Users/seantrott/Dropbox/UCSD/Research/NLMs/vlm_affordances/src/main_study/")
directory_path <- "../../data/processed/models/hf_models/"
csv_files <- list.files(path = directory_path, pattern = "*.csv", full.names = TRUE)
csv_list <- csv_files %>%
map(~ read_csv(.))
df_hf_models <- bind_rows(csv_list)
df_hf_models = df_hf_models %>%
mutate(condition = str_to_title(sub("_.*", "", condition)))
table(df_hf_models$model_name)
directory_path <- "../../data/processed/models/closed_models//"
csv_files <- list.files(path = directory_path, pattern = "*.csv", full.names = TRUE)
csv_list <- csv_files %>%
map(~ read_csv(.))
df_closed_models <- bind_rows(csv_list)
df_closed_models = df_closed_models %>%
mutate(condition = str_to_title(sub("_.*", "", condition)))
table(df_closed_models$model_name)
df_merged = df_hf_models %>%
bind_rows(df_closed_models) %>%
group_by(model_name, version) %>%
mutate(response_z = scale(response))
### Z-score response
df_hf_models = df_hf_models %>%
group_by(model_name, version) %>%
mutate(response_z = scale(response))
df_merged = df_merged %>%
group_by(model_name, version) %>%
mutate(response_z = scale(response))
df_accuracy = df_merged %>%
select(condition, response_z, group_id, text,
model_name) %>%
#filter(condition != "Related") %>%
pivot_wider(
names_from = condition,
values_from = c(response_z),
names_prefix = "condition_"
) %>%
mutate(diff_main = condition_Afforded - `condition_Non-Afforded`,
diff_manipulation_check = condition_Related -`condition_Non-Afforded`) %>%
mutate(accuracy_main = diff_main > 0,
accuracy_manipulation_check = diff_manipulation_check > 0)
df_accuracy %>%
ggplot(aes(x = group_id, y = diff_main)) +
geom_bar(stat = "identity") +
# geom_vline(xintercept = 0, linetype = "dotted") +
facet_wrap(~model_name) +
theme_minimal() +
geom_hline(yintercept = 0, linetype = "dotted") +
labs(x = "Item Number",
y = "Difference (Afforded vs. Non-Afforded)") +
theme(axis.title = element_text(size=rel(1.2)),
axis.text = element_text(size = rel(1.2)),
legend.text = element_text(size = rel(1.2)),
# legend.title = element_text(size = rel(1.5)),
strip.text.x = element_text(size = rel(1.2)),
legend.position = "none")
View(df_accuracy)
colnames(df_accuracy)
df_wide <- df_accuracy %>%
select(group_id, model_name, condition_Non_Afforded) %>%
pivot_wider(names_from = model_name, values_from = condition_Non_Afforded)
df_wide <- df_accuracy %>%
select(group_id, model_name, `condition_Non-Afforded`) %>%
pivot_wider(names_from = model_name, values_from = `condition_Non-Afforded`)
View(df_wide)
View(df_accuracy)
### reshape data
df_wide <- df_accuracy %>%
select(group_id, model_name, version, prompt_type, `condition_Non-Afforded`) %>%
pivot_wider(names_from = model_name, values_from = `condition_Non-Afforded`)
df_accuracy$version
df_wide <- df_accuracy %>%
select(group_id, model_name, version, `condition_Non-Afforded`) %>%
pivot_wider(names_from = model_name, values_from = `condition_Non-Afforded`)
View(df_wide)
df_wide <- df_accuracy %>%
select(group_id, model_name, version, `condition_Non-Afforded`) %>%
pivot_wider(names_from = c(model_name, version),
values_from = `condition_Non-Afforded`)
View(df_wide)
df_accuracy$`condition_Non-Afforded`
df_accuracy$`condition_Non-Afforded`[:1]
df_accuracy$`condition_Non-Afforded`[1]
head(df_fwide)
head(df_wide)
View(df_wide)
str(df_accuracy)
df_wide <- df_accuracy %>%
unnest(cols = c(`condition_Non-Afforded`)) %>%
select(group_id, model_name, version, `condition_Non-Afforded`) %>%
pivot_wider(names_from = c(model_name, version),
values_from = `condition_Non-Afforded`)
s = df_accuracy %>%
unnest(cols = c(`condition_Non-Afforded`))
View(s)
s = df_accuracy %>%
select(group_id, model_name, version, `condition_Non-Afforded`)
View(s)
df_wide <- df_accuracy %>%
select(group_id, model_name, version, `condition_Non-Afforded`) %>%
pivot_wider(names_from = c(model_name, version, group_id),
values_from = `condition_Non-Afforded`)
View(df_wide)
### reshape data
df_wide <- df_accuracy %>%
select(group_id, model_name, version, `condition_Non-Afforded`) %>%
pivot_wider(names_from = c(model_name, version),
values_from = `condition_Non-Afforded`)
View(df_wide)
df_accuracy = df_merged %>%
select(condition, response_z, group_id, text,
model_name) %>%
#filter(condition != "Related") %>%
pivot_wider(
names_from = condition,
values_from = c(response_z),
names_prefix = "condition_"
)
View(df_accuracy)
### reshape data
df_wide <- df_accuracy %>%
select(group_id, model_name, version, diff_main) %>%
pivot_wider(names_from = c(model_name, version),
values_from = diff_main)
df_accuracy = df_merged %>%
select(condition, response_z, group_id, text,
model_name) %>%
#filter(condition != "Related") %>%
pivot_wider(
names_from = condition,
values_from = c(response_z),
names_prefix = "condition_"
) %>%
mutate(diff_main = condition_Afforded - `condition_Non-Afforded`,
diff_manipulation_check = condition_Related -`condition_Non-Afforded`) %>%
mutate(accuracy_main = diff_main > 0,
accuracy_manipulation_check = diff_manipulation_check > 0)
### reshape data
df_wide <- df_accuracy %>%
select(group_id, model_name, version, diff_main) %>%
pivot_wider(names_from = c(model_name, version),
values_from = diff_main)
View(df_wide)
View(df_accuracy)
View(df_merged)
View(df_hf_models)
etwd("/Users/seantrott/Dropbox/UCSD/Research/NLMs/vlm_affordances/src/main_study/")
Vs
setwd("/Users/seantrott/Dropbox/UCSD/Research/NLMs/vlm_affordances/src/main_study/")
directory_path <- "../../data/processed/models/hf_models/"
csv_files <- list.files(path = directory_path, pattern = "*.csv", full.names = TRUE)
csv_list <- csv_files %>%
map(~ read_csv(.))
df_hf_models <- bind_rows(csv_list)
df_hf_models = df_hf_models %>%
mutate(condition = str_to_title(sub("_.*", "", condition)))
table(df_hf_models$model_name)
View(df_hf_models)
directory_path <- "../../data/processed/models/closed_models//"
csv_files <- list.files(path = directory_path, pattern = "*.csv", full.names = TRUE)
csv_list <- csv_files %>%
map(~ read_csv(.))
df_closed_models <- bind_rows(csv_list)
df_closed_models = df_closed_models %>%
mutate(condition = str_to_title(sub("_.*", "", condition)))
table(df_closed_models$model_name)
df_merged = df_hf_models %>%
bind_rows(df_closed_models)
View(df_merged)
df_merged = df_hf_models %>%
bind_rows(df_closed_models) %>%
group_by(model_name, version) %>%
mutate(response_z = scale(response))
df_merged$response_z <- as.numeric(unlist(df_merged$response_z))
View(df_merged)
### Z-score response
df_hf_models = df_hf_models %>%
group_by(model_name, version) %>%
mutate(response_z = scale(response))
df_accuracy = df_merged %>%
select(condition, response_z, group_id, text,
model_name) %>%
#filter(condition != "Related") %>%
pivot_wider(
names_from = condition,
values_from = c(response_z),
names_prefix = "condition_"
) %>%
mutate(diff_main = condition_Afforded - `condition_Non-Afforded`,
diff_manipulation_check = condition_Related -`condition_Non-Afforded`) %>%
mutate(accuracy_main = diff_main > 0,
accuracy_manipulation_check = diff_manipulation_check > 0)
View(df_accuracy)
df_accuracy %>%
ggplot(aes(x = group_id, y = diff_main)) +
geom_bar(stat = "identity") +
# geom_vline(xintercept = 0, linetype = "dotted") +
facet_wrap(~model_name) +
theme_minimal() +
geom_hline(yintercept = 0, linetype = "dotted") +
labs(x = "Item Number",
y = "Difference (Afforded vs. Non-Afforded)") +
theme(axis.title = element_text(size=rel(1.2)),
axis.text = element_text(size = rel(1.2)),
legend.text = element_text(size = rel(1.2)),
# legend.title = element_text(size = rel(1.5)),
strip.text.x = element_text(size = rel(1.2)),
legend.position = "none")
accuracy_by_model = df_accuracy %>%
group_by(model_name) %>%
summarise(avg_accuracy_main = mean(accuracy_main),
avg_accuracy_manipulation = mean(accuracy_manipulation_check))
accuracy_by_model
accuracy_by_model %>%
ggplot(aes(x = reorder(model_name, avg_accuracy_main),
y = avg_accuracy_main)) +
geom_bar(stat = "identity") +
scale_fill_viridis_d() +
labs(x = "Model",
y = "Accuracy (Afforded vs. Non-Afforded)") +
coord_flip() +
theme_minimal() +
scale_y_continuous(limits = c(0, 1)) +
theme(axis.title = element_text(size=rel(1.2)),
axis.text = element_text(size = rel(1.2)),
legend.text = element_text(size = rel(1.2)),
# legend.title = element_text(size = rel(1.5)),
strip.text.x = element_text(size = rel(1.2)),
legend.position = "none")
### reshape data
df_wide <- df_accuracy %>%
select(group_id, model_name, version, diff_main) %>%
pivot_wider(names_from = c(model_name, version),
values_from = diff_main)
View(df+wide)
View(df+wide)
View(df_wide)
View(df_accuracy)
View(df_accuracy)
table(df_accuracy$group_id, df_accuracy$model_name)
df_accuracy$version
df_accuracy = df_merged %>%
select(condition, response_z, group_id, text,
model_name, prompt_type) %>%
#filter(condition != "Related") %>%
pivot_wider(
names_from = condition,
values_from = c(response_z),
names_prefix = "condition_"
) %>%
mutate(diff_main = condition_Afforded - `condition_Non-Afforded`,
diff_manipulation_check = condition_Related -`condition_Non-Afforded`) %>%
mutate(accuracy_main = diff_main > 0,
accuracy_manipulation_check = diff_manipulation_check > 0)
table(df_accuracy$group_id, df_accuracy$model_name)
df_accuracy %>%
ggplot(aes(x = group_id, y = diff_main)) +
geom_bar(stat = "identity") +
# geom_vline(xintercept = 0, linetype = "dotted") +
facet_wrap(~model_name) +
theme_minimal() +
geom_hline(yintercept = 0, linetype = "dotted") +
labs(x = "Item Number",
y = "Difference (Afforded vs. Non-Afforded)") +
theme(axis.title = element_text(size=rel(1.2)),
axis.text = element_text(size = rel(1.2)),
legend.text = element_text(size = rel(1.2)),
# legend.title = element_text(size = rel(1.5)),
strip.text.x = element_text(size = rel(1.2)),
legend.position = "none")
accuracy_by_model = df_accuracy %>%
group_by(model_name) %>%
summarise(avg_accuracy_main = mean(accuracy_main),
avg_accuracy_manipulation = mean(accuracy_manipulation_check))
accuracy_by_model
accuracy_by_model %>%
ggplot(aes(x = reorder(model_name, avg_accuracy_main),
y = avg_accuracy_main)) +
geom_bar(stat = "identity") +
scale_fill_viridis_d() +
labs(x = "Model",
y = "Accuracy (Afforded vs. Non-Afforded)") +
coord_flip() +
theme_minimal() +
scale_y_continuous(limits = c(0, 1)) +
theme(axis.title = element_text(size=rel(1.2)),
axis.text = element_text(size = rel(1.2)),
legend.text = element_text(size = rel(1.2)),
# legend.title = element_text(size = rel(1.5)),
strip.text.x = element_text(size = rel(1.2)),
legend.position = "none")
### reshape data
df_wide <- df_accuracy %>%
select(group_id, model_name, diff_main, prompt_type) %>%
pivot_wider(names_from = c(model_name),
values_from = diff_main)
View(df_wide)
View(df_wide)
df_wide <- df_accuracy %>%
group_by(model_name, group_id) %>%
summarise(avg_diff_main = mean(diff_main)) %>%
select(group_id, model_name, avg_diff_main) %>%
pivot_wider(names_from = c(model_name),
values_from = diff_main)
df_accuracy$diff_main
df_wide <- df_accuracy %>%
group_by(model_name, group_id) %>%
summarise(avg_diff_main = mean(diff_main)) %>%
select(group_id, model_name, avg_diff_main) %>%
pivot_wider(names_from = c(model_name),
values_from = avg_diff_main)
View(df_main)
View(df_wide)
cor_matrix <- cor(df_wide[, -1], use = "complete.obs")  # Exclude group_id column
print(cor_matrix)
cols = df_wide %>%
select(-group_id)
cor_matrix <- cor(cols, use = "complete.obs")  # Exclude group_id column
print(cor_matrix)
cor_matrix
library(ggcorrplot)
install.packages("library(ggcorrplot)")
install.packages("ggcorrplot")
library(ggcorrplot)
# Plot the correlation matrix
ggcorrplot(cor_matrix, lab = TRUE)
?ggcorrplot
ggcorrplot(cor_matrix, lab = TRUE, method = "circle")
?ggcorrplot
ggcorrplot(cor_matrix, lab = FALSE)
# Define breaks such that colors range between -1 and 1
breaks <- seq(-1, 1, length.out=101)
# Create a color palette
my_palette <- colorRampPalette(c("lightblue", "white", "lightcoral"))(100)
heatmap.2(cor_matrix,
breaks=breaks,
col=my_palette,
main="GPT-4 Norms",
trace="none",
dendrogram="none", # no clustering
Rowv=FALSE,
Colv=FALSE,
scale="none",
key=TRUE,
keysize=1.2,
symm=TRUE, # symmetric heatmap
density.info="none",
margins=c(6,6),
cexRow=0.9, # Adjust font size of row labels if needed
cexCol=0.9, # Adjust font size of column labels if needed
cellnote=round(cor_matrix, 2), # Add correlation values to cells
notecol="black", # Color for cell values
notecex=0.8) # Font size for cell values
?heatmap
library(heatmap)
library(stats)
heatmap.2(cor_matrix,
breaks=breaks,
col=my_palette,
main="GPT-4 Norms",
trace="none",
dendrogram="none", # no clustering
Rowv=FALSE,
Colv=FALSE,
scale="none",
key=TRUE,
keysize=1.2,
symm=TRUE, # symmetric heatmap
density.info="none",
margins=c(6,6),
cexRow=0.9, # Adjust font size of row labels if needed
cexCol=0.9, # Adjust font size of column labels if needed
cellnote=round(cor_matrix, 2), # Add correlation values to cells
notecol="black", # Color for cell values
notecex=0.8) # Font size for cell values
library(vegan)
?heatmap.2
library(gplots)
heatmap.2(cor_matrix,
breaks=breaks,
col=my_palette,
main="GPT-4 Norms",
trace="none",
dendrogram="none", # no clustering
Rowv=FALSE,
Colv=FALSE,
scale="none",
key=TRUE,
keysize=1.2,
symm=TRUE, # symmetric heatmap
density.info="none",
margins=c(6,6),
cexRow=0.9, # Adjust font size of row labels if needed
cexCol=0.9, # Adjust font size of column labels if needed
cellnote=round(cor_matrix, 2), # Add correlation values to cells
notecol="black", # Color for cell values
notecex=0.8) # Font size for cell values
?heatmap.2
## Another visualization
heatmap.2(cor_matrix,
breaks=breaks,
col=my_palette,
main="Correlations",
trace="none",
dendrogram="column", # no clustering
Rowv=FALSE,
Colv=FALSE,
scale="none",
key=TRUE,
keysize=1.2,
symm=TRUE, # symmetric heatmap
density.info="none",
margins=c(6,6),
cexRow=0.9, # Adjust font size of row labels if needed
cexCol=0.9, # Adjust font size of column labels if needed
cellnote=round(cor_matrix, 2), # Add correlation values to cells
notecol="black", # Color for cell values
notecex=0.8) # Font size for cell values
# Plot the correlation matrix
ggcorrplot(cor_matrix, lab = FALSE)
heatmap.2(cor_matrix,
breaks=breaks,
col=my_palette,
main="Correlations",
trace="none",
dendrogram="column", # no clustering
Rowv=FALSE,
Colv=FALSE,
scale="none",
key=TRUE,
keysize=1.2,
symm=TRUE, # symmetric heatmap
density.info="none",
margins=c(6,6),
cexRow=0.9, # Adjust font size of row labels if needed
cexCol=0.9, # Adjust font size of column labels if needed
cellnote=round(cor_matrix, 2), # Add correlation values to cells
notecol="black", # Color for cell values
notecex=0.8) # Font size for cell values
## Another visualization
heatmap.2(cor_matrix,
breaks=breaks,
col=my_palette,
main="Correlations",
trace="none",
dendrogram="none", # no clustering
Rowv=FALSE,
Colv=FALSE,
scale="none") # Font size for cell values
ggcorrplot(cor_matrix, lab = FALSE)
df_hf_models = df_hf_models %>%
mutate(architecture = case_when(
model_name %in% c("vilt-coco", "bridgetower", "vilt-f30k") ~ "Fusion",
model_name %in% c("flava-full") ~ "Both",
TRUE ~ "Dual-Encoder"
))
df_summary <- df_hf_models %>%
group_by(condition, architecture) %>%
summarize(avg_response = mean(response_z, na.rm = TRUE),
se_response = sd(response_z, na.rm = TRUE) / sqrt(n()))
ggplot(df_summary, aes(x = architecture, y = avg_response,
color = condition, group = condition)) +
geom_point(size = 3,
position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = avg_response - se_response,
ymax = avg_response + se_response),
width = 0.2,
position = position_dodge(width = 0.5)) +
labs(# title = "",
x = "Architecture",
y = "Z-scored Response",
color = "") +
coord_flip() +
geom_hline(yintercept = 0, linetype = "dotted") +
theme_minimal() +
scale_color_viridis_d() +
theme(axis.title = element_text(size=rel(1.2)),
axis.text = element_text(size = rel(1.2)),
legend.text = element_text(size = rel(1.2)),
# legend.title = element_text(size = rel(1.5)),
strip.text.x = element_text(size = rel(1.2)),
legend.position = "bottom")
